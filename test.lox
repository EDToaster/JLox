fun timeIt(func) {
    var start = time();
    func();
    var end = time();
    print("${end - start} milliseconds elapsed");
}

fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

timeIt(fun() fib(10););

print("This is a string!");
print("This is a ${"doubly "}${"nested ${"interpolation"}"} string!");


fun makeCounter() {
    var count = 0;
    fun counter() {
        count = count + 1;
        return count;
    }
    return counter;
}

var c = makeCounter();
print("Counter: " + c());
print("Counter: " + c());

fun thrice(fn) {
  for (var i = 1; i <= 3; i = i + 1) {
    fn(i);
  }
}

thrice(fun(i) print("Thrice: " + i););

// Test name binding for functions
var anon = fun() {};
fun named_func() {}
var func_alias = named_func;

assert(anon != named_func);
assert(named_func == func_alias);

// Test self-referential recursion
fun count_down(i) {
    if (i < 0) return;

    print(i);
    count_down(i - 1);
}

count_down(10);

// Test classes
class TestClass {
    greet(name) return "Hello, ${name}!";
}

print(TestClass);
print(TestClass().greet("me"));

for (var i = 0; i < 5; i = i + 1) {
    match (i) {
        0, 2-1 => print("low");
        2, 3 => print("high");
        else => print("very high!");
    }
}

var outerObj = TestClass();
var innerObj = TestClass();
outerObj.inner = innerObj;
outerObj.x = "hello,";
outerObj.inner.x = " world!";
print(outerObj.x + outerObj.inner.x);
assert(outerObj.inner == innerObj);

// It should know which instance the sayName method was hoisted from
class Person {
  init(name) {
    this.name = name;
  }

  sayName() {
    print(this.name);
  }
}

var jane = Person("Jane");
var bill = Person("Bill");

bill.sayName = jane.sayName;
bill.sayName(); // should say "Jane"

//exit(111);

/*
THIS IS A
/* NESTED */
COMMENT
*/