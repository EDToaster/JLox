fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

var start = time();
for (var i = 0; i < 10; i = i + 1) {
  fib(i);
}
var end = time();

print("" + (end - start) + " milliseconds elapsed");

fun makeCounter() {
    var count = 0;
    fun counter() {
        count = count + 1;
        return count;
    }
    return counter;
}

var c = makeCounter();
print("Counter: " + c());
print("Counter: " + c());

fun thrice(fn) {
  for (var i = 1; i <= 3; i = i + 1) {
    fn(i);
  }
}

thrice(fun(i) print("Thrice: " + i););

// Test name binding for functions
var anon = fun() {};
fun named_func() {}
var func_alias = named_func;

assert(anon != named_func);
assert(named_func == func_alias);

// Test self-referential recursion
fun count_down(i) {
    if (i < 0) {return;}

    print(i);
    count_down(i - 1);
}

count_down(10);